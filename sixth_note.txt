Testing, documentation and automation 


testing - testing code with a number of test programes, use systems that will run tests on every change of code 
documentation - small projects, documentation can be done by choosing appropriate class, method, variabe names 
packaging - packaging the software need variables, libraries to be set and in the correct locations. depooyment technologies are used for that reason, to put things all together 

cTest: part of cmake, provides two services:
allows easy run all tests that supply with you package 
summarieses the results in dashboard that can be submitted to a webserver for easy inspection 

travis-ci:
a continuous integration service that can be set up to run a script everytime a code change is commited to repository. 
builds binaries and runs the tests. 

doxygen: tool that looks through source code for specially formatted comments meant to be included in the package documentation 
final results are a webpage, pdf document and bundles of ducuments. 

cpack: cpack is yet another component of the cmake ecosystem. provides a convinent way to gather executables, libraries, etc. 

writing and running tests. 

tests are simply porgrammes that return 0 on sucess and non zero on failure 

thwo things to note: 

inclusion of include(ctest) after project statement 
enables testing for the project and make sure the corresponding targets are created 

in line add_test(test1 test1) 
first argument is name of test, secornd is name of executable that will be run as part of test 

Doxygen 
documentation of code, both targeted at end users and client developers 

no of tools have emerged 
coder can insert essentially anythign in the source code as long as its part of a comment // or /* */
comments made in this structure are reognised by the system and extracted by the documentation generator 

